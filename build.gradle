plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'me.leegiseok'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9"

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.projectlombok:lombok'
    implementation 'com.mysql:mysql-connector-j'
    implementation 'org.flywaydb:flyway-core'
    annotationProcessor 'org.projectlombok:lombok'


    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'


}
jacoco {
    toolVersion = "0.8.12"

}
test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active', 'test')
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true;

    }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/*Application', '**/config/**', '**/dto/**'
                ])

            }))

        }
    }


jacocoTestCoverageVerification {
    violationRules{
        rule{
            limit{
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
        rule {
            element = "PACKAGE"
            includes = [
                    'me.leegiseok.project.service.*',
                    'me.leegiseok.project.article.*'
            ]
            limit {
                counter = "BRANCH"
                value =  "COVEREDRATIO"
                minimum = 0.70
            }


        }
    }

}
check.dependsOn jacocoTestCoverageVerification

